name: Release
 
on:
  push:
    branches: [ master ]
    tags-ignore: [ updater ]

permissions: write-all
 
jobs:
  change-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
      - id: outputstep
        run: |
          echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> "$GITHUB_OUTPUT"
      - name: Change Version for Windows
        run: |
          jq ".version = \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"" package.json > package.json.tmp && mv package.json.tmp package.json

          jq ".version = \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"" src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json

          sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"/g" src-tauri/Cargo.toml
          
          echo $(git describe --tags | sed 's/-[0-9]*-.*//g')

      - name: Upload Artifacts for Windows
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: ./*
          include-hidden-files: true
          if-no-files-found: error
  # build-for-macos:
  #   needs: change-version
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [macos-latest]
  #       target: [aarch64-apple-darwin, x86_64-apple-darwin]

  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: source
  #     - name: Setup Nodejs
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - name: Install Rust Stable
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Install OpenSSL for macOS (arm64)
  #       if: matrix.target == 'aarch64-apple-darwin'
  #       run: |
  #         brew install openssl@3 pkg-config
  #         OPENSSL_PREFIX=$(brew --prefix openssl@3)
  #         echo "OPENSSL_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
  #         echo "OPENSSL_ROOT_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
  #         echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig" >> $GITHUB_ENV
  #         echo "LDFLAGS=-L$OPENSSL_PREFIX/lib" >> $GITHUB_ENV
  #         echo "CPPFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
  #     - name: Install OpenSSL for macOS (x86_64)
  #       if: matrix.target == 'x86_64-apple-darwin'
  #       id: openssl_x86 # Add an ID to this step
  #       run: |
  #         # Ensure Homebrew uses x86_64 architecture
  #         arch -x86_64 brew install openssl@1.1 pkg-config
  #         # Output the prefix path for later use
  #         echo "openssl_prefix=$(arch -x86_64 brew --prefix openssl@1.1)" >> $GITHUB_OUTPUT
  #     - name: install dependencies
  #       run: |
  #         rustup target add ${{ matrix.target }}
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: 7
  #     - name: Install Dependencies
  #       run: pnpm install --no-frozen-lockfile
  #     - name: Build and Package
  #       env:
  #         OPENSSL_NO_VENDOR: 1
  #         TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  #         PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
  #         # Conditionally set core OpenSSL env vars using step output for x86_64 or GITHUB_ENV for arm64
  #         OPENSSL_DIR: ${{ matrix.target == 'x86_64-apple-darwin' && steps.openssl_x86.outputs.openssl_prefix || env.OPENSSL_DIR }}
  #         OPENSSL_ROOT_DIR: ${{ matrix.target == 'x86_64-apple-darwin' && steps.openssl_x86.outputs.openssl_prefix || env.OPENSSL_ROOT_DIR }}
  #         # Other vars (LIB_DIR, INCLUDE_DIR, PKG_CONFIG_PATH, LDFLAGS, CPPFLAGS) will be set in the run script
  #       run: |
  #         echo "OPENSSL_DIR: $OPENSSL_DIR"
  #         echo "OPENSSL_ROOT_DIR: $OPENSSL_ROOT_DIR"

  #         if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
  #           # Export paths specifically for the x86_64 build environment using step output
  #           export OPENSSL_LIB_DIR="${{ steps.openssl_x86.outputs.openssl_prefix }}/lib"
  #           export OPENSSL_INCLUDE_DIR="${{ steps.openssl_x86.outputs.openssl_prefix }}/include"
  #           export PKG_CONFIG_PATH="${{ steps.openssl_x86.outputs.openssl_prefix }}/lib/pkgconfig"
  #           export LDFLAGS="-L${{ steps.openssl_x86.outputs.openssl_prefix }}/lib"
  #           export CPPFLAGS="-I${{ steps.openssl_x86.outputs.openssl_prefix }}/include"
  #           export LIBRARY_PATH="${{ steps.openssl_x86.outputs.openssl_prefix }}/lib"
  #           echo "Exported OPENSSL_LIB_DIR: $OPENSSL_LIB_DIR"
  #           echo "Exported OPENSSL_INCLUDE_DIR: $OPENSSL_INCLUDE_DIR"
  #           echo "Exported PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
  #           echo "Exported LDFLAGS: $LDFLAGS"
  #           echo "Exported CPPFLAGS: $CPPFLAGS"
  #           echo "Exported LIBRARY_PATH: $LIBRARY_PATH"
  #           arch -x86_64 pkg-config --cflags --libs openssl  # Verify OpenSSL path
  #           arch -x86_64 pnpm tauri build --target ${{ matrix.target }}
  #         else # aarch64
  #           # Use paths set via GITHUB_ENV in the arm64 install step
  #           echo "Using PKG_CONFIG_PATH (from GITHUB_ENV): $PKG_CONFIG_PATH"
  #           echo "Using LDFLAGS (from GITHUB_ENV): $LDFLAGS"
  #           echo "Using CPPFLAGS (from GITHUB_ENV): $CPPFLAGS"
  #           pkg-config --cflags --libs openssl  # Verify OpenSSL path
  #           pnpm tauri build --target ${{ matrix.target }}
  #         fi
  #     - name: Change File Name
  #       if: matrix.target == 'x86_64-apple-darwin'
  #       run: |
  #         sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/mop.app.tar.gz src-tauri/target/x86_64-apple-darwin/release/bundle/macos/mop_${{needs.change-version.outputs.version}}_x64.app.tar.gz
  #         sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/mop.app.tar.gz.sig src-tauri/target/x86_64-apple-darwin/release/bundle/macos/mop_${{needs.change-version.outputs.version}}_x64.app.tar.gz.sig
  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos_${{ matrix.target }}_dmg
  #         path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
  #         if-no-files-found: error
  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos_${{ matrix.target }}_updater
  #         path: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*
  #         if-no-files-found: error
  #     - name: Upload Release
  #       if: startsWith(github.ref, 'refs/tags')
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         body_path: CHANGELOG.md
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
  #     - name: Upload Release
  #       if: startsWith(github.ref, 'refs/tags')
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         body_path: CHANGELOG.md
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         files: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*
  # build-for-windows:
  #   needs: change-version
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [windows-latest]
  #       target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, aarch64-pc-windows-msvc]
  #       include:
  #         - os: windows-latest
  #           target: x86_64-pc-windows-msvc
  #           toolchain: stable-x86_64-pc-windows-msvc
  #         - os: windows-latest
  #           target: i686-pc-windows-msvc
  #           toolchain: stable-i686-pc-windows-msvc
  #         - os: windows-latest
  #           target: aarch64-pc-windows-msvc
  #           toolchain: stable-aarch64-pc-windows-msvc
  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: source
  #     - name: Install OpenSSL via Chocolatey
  #       shell: powershell
  #       run: |
  #           choco install openssl -y
  #     - name: Set OpenSSL Path
  #       shell: powershell
  #       run: |
  #         $opensslPath = "C:\Program Files\OpenSSL"
  #         echo "Adding OpenSSL to PATH: $opensslPath\bin"
  #         Add-Content $env:GITHUB_PATH "$opensslPath\bin"
  #         echo "OPENSSL_DIR=$opensslPath" >> $env:GITHUB_ENV
  #         echo "OPENSSL_ROOT_DIR=$opensslPath" >> $env:GITHUB_ENV
  #         echo "PKG_CONFIG_PATH=$opensslPath\lib\pkgconfig" >> $env:GITHUB_ENV
  #     - name: Setup Nodejs
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - name: Install Rust Stable
  #       uses: dtolnay/rust-toolchain@stable
  #     # Windows doesn't need OpenSSL installation via brew
  #     # OpenSSL is typically bundled with Rust on Windows
  #     - name: install dependencies
  #       run: |
  #         rustup target add ${{ matrix.target }}
  #         rustup toolchain install --force-non-host ${{ matrix.toolchain }}
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #           version: 8
  #     - name: Install Dependencies
  #       run: pnpm install
  #     - name: Build and Package
  #       env:
  #         OPENSSL_NO_VENDOR: 1
  #       run: |
  #         $env:TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
  #         $env:TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
  #         echo "Using OpenSSL from: $env:OPENSSL_DIR"
  #         pnpm tauri build -b nsis,updater --target ${{ matrix.target }}
  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows_${{ matrix.target }}
  #         path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*
  #         if-no-files-found: error
  #     - name: Upload Release
  #       if: startsWith(github.ref, 'refs/tags')
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         body_path: CHANGELOG.md
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         files: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*
  build-for-linux:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target:
          [
            x86_64-unknown-linux-gnu,
            # i686-unknown-linux-gnu,
            aarch64-unknown-linux-gnu,
            # armv7-unknown-linux-gnueabihf,
          ]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: stable-x86_64-unknown-linux-gnu
          # - os: ubuntu-latest
          #   target: i686-unknown-linux-gnu
          #   toolchain: stable-i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            toolchain: stable-aarch64-unknown-linux-gnu
          # - os: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   toolchain: stable-armv7-unknown-linux-gnueabihf
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: source
      - name: Build for Linux
        uses: ./.github/actions/build-for-linux
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
            target: ${{ matrix.target }}
            toolchain: ${{ matrix.toolchain }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_${{ matrix.target }}_deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Artifacts
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v4
        with:
          name: linux_${{ matrix.target }}_appimage
          path: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage*
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags') && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage*
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
  update:
    needs: [build-for-linux]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install --no-frozen-lockfile

      - name: Updater JSON
        run: pnpm updater
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy install.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater

      - name: Query version number
        run: echo "version=${GITHUB_REF:11}" >> $GITHUB_ENV
